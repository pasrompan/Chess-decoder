// <auto-generated />
using System;
using ChessDecoderApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChessDecoderApi.Migrations
{
    [DbContext(typeof(ChessDecoderDbContext))]
    partial class ChessDecoderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChessDecoderApi.Models.ChessGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("PgnContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PgnOutputPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProcessingTimeMs")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ValidationMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChessGames");
                });

            modelBuilder.Entity("ChessDecoderApi.Models.GameImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChessGameId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChessGameId");

                    b.ToTable("GameImages");
                });

            modelBuilder.Entity("ChessDecoderApi.Models.GameStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChessGameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvalidMoves")
                        .HasColumnType("integer");

                    b.Property<string>("Opening")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalMoves")
                        .HasColumnType("integer");

                    b.Property<int>("ValidMoves")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChessGameId")
                        .IsUnique();

                    b.ToTable("GameStatistics");
                });

            modelBuilder.Entity("ChessDecoderApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChessDecoderApi.Models.ChessGame", b =>
                {
                    b.HasOne("ChessDecoderApi.Models.User", "User")
                        .WithMany("ProcessedGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChessDecoderApi.Models.GameImage", b =>
                {
                    b.HasOne("ChessDecoderApi.Models.ChessGame", "ChessGame")
                        .WithMany("InputImages")
                        .HasForeignKey("ChessGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChessGame");
                });

            modelBuilder.Entity("ChessDecoderApi.Models.GameStatistics", b =>
                {
                    b.HasOne("ChessDecoderApi.Models.ChessGame", "ChessGame")
                        .WithOne("Statistics")
                        .HasForeignKey("ChessDecoderApi.Models.GameStatistics", "ChessGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChessGame");
                });

            modelBuilder.Entity("ChessDecoderApi.Models.ChessGame", b =>
                {
                    b.Navigation("InputImages");

                    b.Navigation("Statistics")
                        .IsRequired();
                });

            modelBuilder.Entity("ChessDecoderApi.Models.User", b =>
                {
                    b.Navigation("ProcessedGames");
                });
#pragma warning restore 612, 618
        }
    }
}
